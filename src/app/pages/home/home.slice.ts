import { PayloadAction, createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import axios from 'axios';

import { IPokeRequester } from '../../../requesters/poke-requester.hook';
import { RootState } from '../../store/store';

export interface PokemonState {
	value: IPokeRequester;
	status: 'idle' | 'loading' | 'failed';
}

const initialState: PokemonState = {
	value: {} as IPokeRequester,
	status: 'idle',
};

export const getPokemonsAsync = createAsyncThunk('pokemon/fetch', async (a) => {
	const response = await axios.get<IPokeRequester>(
		'https://pokeapi.co/api/v2/pokemon?limit=10&offset=0',
	);
	return response.data;
});

export const pokemonSlice = createSlice({
	name: 'counter',
	initialState,
	// The `reducers` field lets us define
	// reducers and generate associated actions
	reducers: {
		increment: (state) => {
			// Redux Toolkit allows us to write "mutating" logic in reducers. It
			// doesn't actually mutate the state because it uses the Immer library,
			// which detects changes to a "draft state" and produces a brand new
			// immutable state based off those changes
		},
		decrement: (state) => {},
		// Use the PayloadAction type to declare the contents of `action.payload`
		incrementByAmount: (state, action: PayloadAction<number>) => {},
	},
	// The `extraReducers` field lets the slice handle actions defined elsewhere,
	// including actions generated by createAsyncThunk or in other slices.
	extraReducers: (builder) => {
		builder
			.addCase(getPokemonsAsync.pending, (state) => {
				state.status = 'loading';
			})
			.addCase(getPokemonsAsync.fulfilled, (state, action) => {
				state.status = 'idle';
				state.value = action.payload;
			});
	},
});

export const { increment, decrement, incrementByAmount } = pokemonSlice.actions;

export const selectPokemons = (
	state: RootState,
): Array<{ name: string; url: string; id: number }> =>
	state.pokemons.value.results?.map((res, idx) => {
		return { ...res, id: idx + 1 };
	});

export const selectStatus = (state: RootState): string => state.pokemons.status;

export default pokemonSlice.reducer;
